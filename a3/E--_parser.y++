%{

#include "Ast.h"
#include "ParserUtil.h"
#include "Error.h"

using namespace std;

extern int verbosity;
extern int yylex();
extern void yyerror(const char *s);
int offSet;
extern const OpNode::OpInfo opInfo[];

%}

%union{
  unsigned int 		 uVal;
  double             dVal;
  char*              cVal;
  vector<string>*    strVector;
  Value*             valVal;

  ExprNode*          exprVal;
  vector<ExprNode*>* exprList;
  RefExprNode*       refexpVal;

  ClassEntry*        classEntry;
  Type*              typeVal;
  vector<Type*>*     typeList; 

  EventEntry*        eventEntry;                        
  VariableEntry*     variableEntry;
  FunctionEntry*     functionEntry;

  BasePatNode*       patVal;
  PrimitivePatNode*  primPatVal;
  StmtNode*          stmtVal;
  list<StmtNode*>*   stmtList;
  IfNode*            ifVal;
  CompoundStmtNode*  compoundStmtVal;
  RuleNode*          ruleNode;

  vector<RuleNode*>* transList;
  
  vector<Type*>*     formalTypeVal;
  const OpNode::OpInfo*    funIval;
};

/* Operators */

%token TOK_LEX_ERROR TOK_PAT_STAR TOK_PAT_OR TOK_PAT_NOT
%token TOK_PLUS TOK_MINUS TOK_UMINUS TOK_MULT TOK_DIV TOK_MOD 
%token TOK_BITAND TOK_BITOR TOK_BITNOT TOK_BITXOR TOK_SHL TOK_SHR 
%token TOK_GT TOK_LT TOK_GE TOK_LE TOK_EQ  TOK_NE TOK_AND TOK_OR TOK_NOT 
%token TOK_COMMA TOK_ASSIGN TOK_SEMICOLON TOK_COLON TOK_ARROW
%token TOK_LBRACE TOK_RBRACE TOK_LPAREN TOK_RPAREN

/* Key words */

%token TOK_IF TOK_ELSE TOK_CLASS TOK_RETURN TOK_EVENT TOK_ANY TOK_PRINT 
%token TOK_UINTNUM TOK_DOUBLENUM TOK_VOID TOK_STRING TOK_STRCONST 
%token TOK_INT TOK_UNSIGNED TOK_BOOL TOK_BYTE TOK_DOUBLE TOK_SHORT
%token TOK_TRUE TOK_FALSE TOK_IDENT

/******************************** Type Info ********************************/
/* Uncomment types below as you start adding rules.
   They are commented right now to prevent compile errors.
%type <functionEntry> function_header function_decl
%type <variableEntry> variable_decl formal_param variable_decl1
%type <typeList> formal_param_list formal_param_plus 
%type <eventEntry> event_decl_hdr event_decl
%type <patVal> event_pattern rule_body1
%type <primPatVal> event primitive_pat 
%type <typeVal> type baseType 
%type <exprList> expr_list expr_plus
%type <exprVal> expr function_invocation asg_stmt
%type <refexpVal> ref_expr
%type <ruleNode> rule
%type <strVector> id_list id_plus

%type <cVal> TOK_IDENT TOK_PRINT 
%type <funIval> ev_or_fun
%type <uVal> TOK_UINTNUM 
%type <dVal> TOK_DOUBLENUM 
%type <cVal> TOK_STRCONST

%type <valVal> literal

%type <stmtList> stmt_plus
%type <stmtVal> stmt simple_stmt
%type <compoundStmtVal> compoundStmt fun_rest
%type <ifVal>  if_then_else_stmt 
*/

/*********************   Precedence and Associativity    ********************/

%nonassoc TOK_ASSIGN

%left  TOK_PAT_OR 
%left  TOK_COLON
%left  TOK_PAT_STAR
%right TOK_PAT_NOT

%left  TOK_OR
%left  TOK_AND
%right TOK_NOT

%nonassoc TOK_EQ TOK_NE TOK_GT TOK_LT TOK_GE TOK_LE

%left  TOK_BITOR TOK_BITXOR
%left  TOK_BITAND
%right TOK_BITNOT 
%left  TOK_SHL TOK_SHR

%right TOK_DOUBLE_COLON

%left  TOK_PLUS TOK_MINUS
%left  TOK_MULT TOK_DIV TOK_MOD
%right TOK_UMINUS 

%left  TOK_LBRACK
%left  TOK_DOT

/**************************************************************************/

%start specification
%%

specification: ifc_decl_star rule_star {
	prt("Spec");
};

ifc_decl_star: /* empty */ {
}
| ifc_decl_star ifc_decl {}
| ifc_decl_star error TOK_SEMICOLON {
	errMsg("Syntax error, expecting a declaration");
}
;

ifc_decl: TOK_SEMICOLON {}
| class_decl TOK_SEMICOLON { prt("ClassDecl"); }
| function_decl TOK_SEMICOLON {}
| function_decl function_body {}
| event_decl TOK_SEMICOLON { prt("EventDecl"); }
| variable_decl TOK_SEMICOLON {}
;

rule_star: error {
	errMsg("Must contain at least one rule");
}
| rule {}
| rule_star rule {}
;

class_decl: TOK_CLASS TOK_IDENT {}
;

function_decl: type TOK_IDENT func_formal_param_star {
	prt("FunctionDecl");
}
;

function_body: TOK_LBRACE variable_decl_star statement_star TOK_RBRACE {
	prt( "FunctionBody" );
}
;

variable_decl: type variable_name_plus {
}
;

variable_name_plus: var_name_opt {}
| variable_name_plus TOK_COMMA var_name_opt {}
;

var_name_opt: TOK_IDENT {
	prt("VariableDecl");
}
| TOK_IDENT TOK_ASSIGN expr {
	prt("VariableDeclWithInit");
}
;

formal_param_star: /* empty */ {}
| formal_param_plus {
	prt("FormalParamList");
}
;

formal_param_plus: formal_param {}
| formal_param_plus TOK_COMMA formal_param {}
;

event_formal_param_star: TOK_LPAREN formal_param_star TOK_RPAREN {}
;

func_formal_param_star: TOK_LPAREN formal_param_star TOK_RPAREN {}
;

formal_param: type TOK_IDENT { prt("FormalParam"); }
;

variable_decl_star: /* empty */ {}
| variable_decl_star variable_decl {}
;

event_decl: TOK_EVENT TOK_IDENT event_formal_param_star {
}
;

rule: event_pattern TOK_ARROW statement {
	prt("Rule");
}
;

event_pattern: primitive_pat_opt {}
| TOK_LPAREN event_pattern TOK_RPAREN { prt("(EventPat)"); }
| TOK_NOT event_pattern { prt("!EventPat"); }
| event_pattern TOK_COLON event_pattern { prt("EventPat : EventPat"); }
| event_pattern TOK_PAT_OR event_pattern { prt("EventPat \\/ EventPat"); }
| event_pattern TOK_PAT_STAR { prt("EventPat **"); }
;

primitive_pat_opt: primitive_pat {
	prt("PrimitivePat");
}
| primitive_pat TOK_BITOR expr {
	prt("PrimitivePatWithCond");
}
;

primitive_pat: TOK_IDENT TOK_LPAREN event_formal_param_list TOK_RPAREN {
	prt("NormalEvent");
}
| TOK_ANY {
	prt("anyEvent");
}
| TOK_ANY event_formal_param_star {
	prt("anyEvent");
}
;

event_formal_param_list: /* empty */ {}
| TOK_IDENT {
	prt("EventFormalParam");
}
| event_formal_param_list TOK_COMMA TOK_IDENT {
	prt("EventFormalParam");
}
;

statement_star: /* empty */ {}
| statement_plus {}
;

statement_plus: statement {}
| statement_plus statement {}
;

statement: TOK_SEMICOLON {}
| TOK_IF expr statement { prt("IfThenStmt"); }
| TOK_IF expr statement TOK_ELSE statement { prt("IfThenElseStmt"); }
| function_call TOK_SEMICOLON { prt("FunctionInvocationStmt"); }
| assignment TOK_SEMICOLON { prt("AssignStmt"); }
| TOK_RETURN expr TOK_SEMICOLON { prt("ReturnStmt"); }
| TOK_LBRACE statement_plus TOK_RBRACE { prt("CompoundStmt"); }
| TOK_LBRACE statement_plus TOK_RBRACE TOK_SEMICOLON { prt("CompoundStmt"); }
;

assignment: ref_expr TOK_ASSIGN expr { prt("Assignment"); }
;

function_call: TOK_IDENT TOK_LPAREN expr_star TOK_RPAREN {
	prt("FunctionInvocation");
}
;

ref_expr: TOK_IDENT { prt("RefExpr"); }
;


expr_star: /* empty */ {}
| expr_plus {}
;

expr_plus: expr {}
| expr_plus TOK_COMMA expr {}
;

expr: TOK_ULONGNUM { prt("Literal"); }
| TOK_UINTNUM { prt("Literal"); }
| TOK_DOUBLENUM { prt("Literal"); }
| TOK_STRCONST { prt("Literal"); }
| TOK_TRUE { prt("Literal"); }
| TOK_FALSE { prt("Literal"); }
| TOK_LPAREN expr TOK_RPAREN { prt("(Expr)"); }
| TOK_MINUS expr { prt("-Expr"); }
| TOK_NOT expr { prt("!Expr"); }
| TOK_BITNOT expr { prt("~Expr"); }
| expr TOK_OR expr { prt("Expr || Expr"); }
| expr TOK_AND expr { prt("Expr && Expr"); }
| expr TOK_EQ expr { prt("Expr == Expr"); }
| expr TOK_NE expr { prt("Expr != Expr"); }
| expr TOK_GT expr { prt("Expr > Expr") ;}
| expr TOK_LT expr { prt("Expr < Expr"); }
| expr TOK_GE expr { prt("Expr >= Expr"); }
| expr TOK_LE expr { prt("Expr <= Expr"); }
| expr TOK_BITOR expr { prt("Expr | Expr"); }
| expr TOK_BITXOR expr { prt("Expr ^ Expr"); }
| expr TOK_BITAND expr { prt("Expr & Expr"); }
| expr TOK_SHL expr { prt("Expr << Expr"); }
| expr TOK_SHR expr { prt("Expr >> Expr"); }
| expr TOK_PLUS expr { prt("Expr + Expr");}
| expr TOK_MINUS expr { prt("Expr - Expr"); }
| expr TOK_MULT expr { prt("Expr * Expr"); }
| expr TOK_DIV expr { prt("Expr / Expr"); }
| expr TOK_MOD expr { prt("Expr % Expr"); }
| function_call {}
| assignment {}
| ref_expr {}
;

type: base_type { prt("Type"); }
| TOK_UNSIGNED base_type { prt("Type"); }
| user_type { prt("Type"); }

base_type: TOK_VOID {}
| TOK_BOOL {}
| TOK_STRING {}
| TOK_BYTE {}
| TOK_INT {}
| TOK_DOUBLE {}
| TOK_SHORT {}
| TOK_LONG {}
;

user_type: TOK_IDENT {}
;

%%
