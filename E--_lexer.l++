%option noyywrap
%option never-interactive

%{
#include "E--_lexer.tab.h"
#include <iostream>
#include <cstdlib>
#define MAX_STR_CONST 1024

using namespace std;

const char* yyfilename="";
int yylinenum=0;

char string_buf[MAX_STR_CONST];
char *string_buf_ptr;

int str_caller = 0;

char *filename = 0;

%}

/* Definitions */

DECIMAL_DIGIT  [0-9]
UINTNUM	       {DECIMAL_DIGIT}+
SINTNUM        [+-]?{UINTNUM}
HEXNUM         0x{UINTNUM}
UMANTISSA      {DECIMAL_DIGIT}*\.{DECIMAL_DIGIT}+
SMANTISSA      [+-]?{UMANTISSA}
DOUBLE         {SMANTISSA}([eE]{SINTNUM})?
WHITESPACE     [' '\t]*
%x STRING
%x FILE_LINE
%x FILE_NAME
%x FILE_INFO_END
%%

 /**************** Recognize line number and file ****************/

#                    { BEGIN(FILE_LINE); }
<FILE_LINE>{UINTNUM} { yylinenum = atoi(yytext);
                       BEGIN(FILE_NAME);
                     }
<FILE_NAME>\"        { string_buf_ptr = string_buf;
                       str_caller = FILE_INFO_END;
                       BEGIN(STRING);
                     }
<FILE_INFO_END>.*\n  { BEGIN(INITIAL);
                       free(filename);
                       int size = strlen(string_buf) + 1;
                       filename = (char*) malloc(size);
                       strcpy(filename, string_buf);
                       yyfilename = filename;
                     }
\n                   { yylinenum ++; }

 /**************** Recognize constants ****************/

{HEXNUM}       { sscanf( yytext + 2, "%x", &(yylval.uVal));
                 return TOK_UINTNUM;
               }

{SINTNUM}      { sscanf( yytext, "%d", &(yylval.uVal));
                 return TOK_UINTNUM;
               }

{DOUBLE}       { sscanf( yytext, "%f", &(yylval.dVal));
                 return TOK_DOUBLENUM;
               }

\"             { string_buf_ptr = string_buf;
                 str_caller = INITIAL;
                 BEGIN(STRING);
               }

<STRING>\"     { BEGIN(str_caller);
                 *string_buf_ptr = '\0';
                 yylval.cVal = string_buf;
                 if(str_caller != FILE_INFO_END) {
                     return TOK_STRCONST;
                 }
               }

<STRING>\n     { BEGIN(str_caller);
                 *string_buf_ptr = '\0';
                 yylval.cVal = string_buf;
                 if(str_caller != FILE_INFO_END) {
                     return TOK_STRCONST;
                 }
               }

<STRING>\\n    *string_buf_ptr++ = '\n';
<STRING>\\t    *string_buf_ptr++ = '\t';
<STRING>\\r    *string_buf_ptr++ = '\r';

<STRING>\\x[0-9a-fA-F]{1,2} {
                 int result;
                 sscanf( yytext + 2, "%x", &result );
                 *string_buf_ptr++ = result;
               }

<STRING>\\.    *string_buf_ptr++ = yytext[1];

<STRING>[^\\\n\"]+ {
                 char *yptr = yytext;
                 while ( *yptr )
                         *string_buf_ptr++ = *yptr++;
               }

 /**************** Recognize operators ****************/

"->"    { return TOK_ARROW; }
"?"     { return TOK_QMARK; }
"\\\/"  { return TOK_PAT_OR; }
"&"     { return TOK_BITAND; }
"|"     { return TOK_BITOR; }
"~"     { return TOK_BITNOT; }
":"     { return TOK_COLON; }
","     { return TOK_COMMA; }
"."     { return TOK_DOT; }
";"     { return TOK_SEMICOLON; }
"["     { return TOK_LBRACK; }
"]"     { return TOK_RBRACK; }
"{"     { return TOK_LBRACE; }
"}"     { return TOK_RBRACE; }
"("     { return TOK_LPAREN; }
")"     { return TOK_RPAREN; }
"+"     { return TOK_PLUS; }
"-"     { return TOK_MINUS; }
"*"     { return TOK_MULT; }
"/"     { return TOK_DIV; }
"="     { return TOK_ASSIGN; }
"&&"    { return TOK_AND; }
"||"    { return TOK_OR; }
"!"     { return TOK_NOT; }
"<"     { return TOK_LT; }
">"     { return TOK_GT; }
"=="    { return TOK_EQ; }
"!="    { return TOK_NE; }
">="    { return TOK_GE; }
"<="    { return TOK_LE; }
"%"     { return TOK_MOD; }
"^"     { return TOK_BITXOR; }
"<<"    { return TOK_SHL; }
">>"    { return TOK_SHR; }

 /**************** Recognize reserved words ****************/

 /* Basic types */

"enum"           { return TOK_ENUM; }
"bool"           { return TOK_BOOL; }
"byte"           { return TOK_BYTE; }
"bit"            { return TOK_BIT; }
"class"          { return TOK_CLASS; }
"double"         { return TOK_DOUBLE; }
"int"            { return TOK_INT; }
"string"         { return TOK_STRING; }
"void"           { return TOK_VOID; }

 /* Other keywords */
"any"            { return TOK_ANY; }
"else"           { return TOK_ELSE; }
"event"          { return TOK_EVENT; }
"false"          { return TOK_FALSE; }
"if"             { return TOK_IF; }
"import"         { return TOK_USE; }
"interface"      { return TOK_INTERFACE; }
"print"          { return TOK_PRINT; }
"return"         { return TOK_RETURN; }
"true"           { return TOK_TRUE; }

 /**************** Identifier ****************/
[a-zA-Z_][a-zA-Z_0-9]* { strcpy(string_buf, yytext);
                         yylval.cVal = string_buf;
                         return TOK_ID;
                       }

 /**************** White spaces ****************/
<*>{WHITESPACE} { /* Ignore white spaces */ }

 /**************** Unrecognized character ==> error ****************/

. {
	return TOK_SYNTAX_ERROR;
}

%%
