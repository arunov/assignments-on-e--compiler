%option noyywrap
%option never-interactive

%{
#include "E--_lexer.tab.h"
#include <iostream>

using namespace std;

const char* yyfilename="";
int yylinenum=0;

%}
/* Definitions */

DECIMAL_DIGIT  [0-9]
UINTNUM	       {DECIMAL_DIGIT}+
SINTNUM        [+-]?{UINTNUM}
HEXNUM         0x{UINTNUM}
UMANTISSA      {DECIMAL_DIGIT}*\.{DECIMAL_DIGIT}+
SMANTISSA      [+-]?{UMANTISSA}
DOUBLE         {SMANTISSA}([eE]{SINTNUM})?
%%

 /**************** Recognize constants ****************/
{SINTNUM}|{HEXNUM} { return TOK_UINTNUM; }
{DOUBLE}           { return TOK_DOUBLENUM; }


 /**************** Recognize operators ****************/

"->"    { return TOK_ARROW; }
"?"     { return TOK_QMARK; }
"\\\/"  { return TOK_PAT_OR; }
"&"     { return TOK_BITAND; }
"|"     { return TOK_BITOR; }
"~"     { return TOK_BITNOT; }
":"     { return TOK_COLON; }
","     { return TOK_COMMA; }
"."     { return TOK_DOT; }
";"     { return TOK_SEMICOLON; }
"["     { return TOK_LBRACK; }
"]"     { return TOK_RBRACK; }
"{"     { return TOK_LBRACE; }
"}"     { return TOK_RBRACE; }
"("     { return TOK_LPAREN; }
")"     { return TOK_RPAREN; }
"+"     { return TOK_PLUS; }
"-"     { return TOK_MINUS; }
"*"     { return TOK_MULT; }
"/"     { return TOK_DIV; }
"="     { return TOK_ASSIGN; }
"&&"    { return TOK_AND; }
"||"    { return TOK_OR; }
"!"     { return TOK_NOT; }
"<"     { return TOK_LT; }
">"     { return TOK_GT; }
"=="    { return TOK_EQ; }
"!="    { return TOK_NE; }
">="    { return TOK_GE; }
"<="    { return TOK_LE; }
"%"     { return TOK_MOD; }
"^"     { return TOK_BITXOR; }
"<<"    { return TOK_SHL; }
">>"    { return TOK_SHR; }

 /**************** Recognize reserved words ****************/

 /* Basic types */

"enum"           { return TOK_ENUM; }
"any"            { return TOK_ANY; }
"bit"            { return TOK_BIT; }
"bool"           { return TOK_BOOL; }
"byte"           { return TOK_BYTE; }
"class"          { return TOK_CLASS; }
"double"         { return TOK_DOUBLE; }
"else"           { return TOK_ELSE; }
"event"          { return TOK_EVENT; }
"false"          { return TOK_FALSE; }
"if"             { return TOK_IF; }
"import"         { return TOK_USE; }
"int"            { return TOK_INT; }
"interface"      { return TOK_INTERFACE; }
"print"          { return TOK_PRINT; }
"return"         { return TOK_RETURN; }
"string"         { return TOK_STRING; }
"true"           { return TOK_TRUE; }
"void"           { return TOK_VOID; }

 /**************** Unrecognized character ==> error ****************/

. {
	return TOK_SYNTAX_ERROR;
}

%%
