%{
#include <iostream>
extern int yylex();
extern void yyerror(const char *s);
extern void errMsg(const char *s);
#define prt(x) cout << x << endl;
using namespace std;
%}

%union{
   char* cVal;
   unsigned int uVal;
   double dblVal;
};

/* Operators */

%token TOK_LEX_ERROR TOK_PAT_STAR TOK_PAT_OR TOK_PAT_NOT
%token TOK_PLUS TOK_MINUS TOK_UMINUS TOK_MULT TOK_DIV TOK_MOD 
%token TOK_BITAND TOK_BITOR TOK_BITNOT TOK_BITXOR TOK_SHL TOK_SHR 
%token TOK_GT TOK_LT TOK_GE TOK_LE TOK_EQ  TOK_NE TOK_AND TOK_OR TOK_NOT 
%token TOK_COMMA TOK_ASSIGN TOK_SEMICOLON TOK_COLON TOK_ARROW
%token TOK_LBRACE TOK_RBRACE TOK_LPAREN TOK_RPAREN

/* Key words */

%token TOK_IF TOK_ELSE TOK_CLASS TOK_RETURN TOK_EVENT TOK_ANY TOK_PRINT 
%token TOK_ULONGNUM TOK_UINTNUM TOK_DOUBLENUM TOK_VOID TOK_STRING TOK_STRCONST 
%token TOK_INT TOK_UNSIGNED TOK_BOOL TOK_BYTE TOK_DOUBLE TOK_SHORT
%token TOK_LONG TOK_TRUE TOK_FALSE TOK_IDENT

/*********************   Precedence and Associativity    ********************/
%nonassoc	TOK_ASSIGN	/* 1 =  */
%left		TOK_PAT_OR	/* 2 \/ */
%left		TOK_COLON	/* 3 :  */
%left		TOK_PAT_STAR	/* 4 ** */
%right		TOK_PAT_NOT	/* 5 pattern not */
%left		TOK_OR		/* 6 || */
%left		TOK_AND		/* 7 && */
%right		TOK_NOT		/* 8 !  */
%nonassoc	TOK_EQ TOK_NE TOK_GT TOK_LT TOK_GE TOK_LE
				/* 9 == != > < >= <= */
%left		TOK_BITOR TOK_BITXOR
				/* 10 | ^ */
%left		TOK_BITAND	/* 11 & */
%right		TOK_BITNOT	/* 12 ~ */
%left		TOK_SHL TOK_SHR	/* 13 << >> */
%left		TOK_PLUS TOK_MINUS
				/* 14 + - */
%left		TOK_MULT TOK_DIV TOK_MOD
				/* 15 * / % */
%right		TOK_UMINUS	/* 16 - */
%left		TOK_LBRACE	/* 17 [ */
%left		TOK_COMMA	/* 18 , */

/**************************************************************************/

%start specification
%%

specification: ifc_decl_star rule_star {
	prt("Spec");
};

ifc_decl_star: /* empty */ {
}
| ifc_decl_star ifc_decl {}
| ifc_decl_star error TOK_SEMICOLON {
	errMsg("Syntax error, expecting a declaration");
}
;

ifc_decl: TOK_SEMICOLON /* Fill in the other rules */
;

rule_star: /* fill in */
;

%%
